/* ---------------------------------------------------------------------------- * @WebScheduler - Web Scheduler * @package     @WebScheduler * @author      SemeOnline(Pty)Ltd <info@semeonline.co.za> * @copyright   Copyright (c) 2019, SemeOnline (Pty)Ltd * @link        https://semeonline.co.za * @since       v1.8 * ---------------------------------------------------------------------------- */window.FrontendBookApi = window.FrontendBookApi || {};/** * Frontend Book API * * This module serves as the API consumer for the booking wizard of the app. * * @module FrontendBookApi */(function (exports) {    'use strict';    var unavailableDatesBackup;    var selectedDateStringBackup;    var processingUnavailabilities = false;    /**     * Get Available Hours     *     * This function makes an AJAX call and returns the available hours for the selected service,     * provider and date.     *     * @param {String} selDate The selected date of which the available hours we need to receive.     */    exports.getAvailableHours = function (selDate) {        $('#available-hours').empty();        // Find the selected service duration (it is going to be send within the "postData" object).        var selServiceDuration = 15; // Default value of duration (in minutes).        $.each(GlobalVariables.availableServices, function (index, service) {            if (service.id == $('#select-service').val()) {                selServiceDuration = service.duration;            }        });        // If the manage mode is true then the appointment's start date should return as available too.        var appointmentId = FrontendBook.manageMode ? GlobalVariables.appointmentData.id : undefined;        // Make ajax post request and get the available hours.        var postUrl = GlobalVariables.baseUrl + '/index.php/appointments/ajax_get_available_hours';        var postData = {            csrfToken: GlobalVariables.csrfToken,            service_id: $('#select-service').val(),            provider_id: $('#select-provider').val(),            selected_date: selDate,            service_duration: selServiceDuration,            manage_mode: FrontendBook.manageMode,            appointment_id: appointmentId        };        $.post(postUrl, postData, function (response) {            if (!GeneralFunctions.handleAjaxExceptions(response)) {                return;            }            // The response contains the available hours for the selected provider and            // service. Fill the available hours div with response data.            if (response.length > 0) {                var currColumn = 1;                $('#available-hours').html('<div style="width:200px; float:left;"></div>');                var timeFormat = GlobalVariables.timeFormat === 'regular' ? 'h:mm tt' : 'HH:mm';                $.each(response, function (index, availableHour) {                    if ((currColumn * 10) < (index + 1)) {                        currColumn++;                        $('#available-hours').append('<div style="width:200px; float:left;"></div>');                    }                    $('#available-hours div:eq(' + (currColumn - 1) + ')').append(                        '<span class="available-hour">' + Date.parse(availableHour).toString(timeFormat) + '</span><br/>');                });                if (FrontendBook.manageMode) {                    // Set the appointment's start time as the default selection.                    $('.available-hour').removeClass('selected-hour');                    $('.available-hour').filter(function () {                        return $(this).text() === Date.parseExact(                            GlobalVariables.appointmentData.start_datetime,                            'yyyy-MM-dd HH:mm:ss').toString(timeFormat);                    }).addClass('selected-hour');                } else {                    // Set the first available hour as the default selection.                    $('.available-hour:eq(0)').addClass('selected-hour');                }                FrontendBook.updateConfirmFrame();            } else {                $('#available-hours').text(WBLang.no_available_hours);            }        }, 'json').fail(GeneralFunctions.ajaxFailureHandler);    };    /**     * Register an appointment to the database.     *     * This method will make an ajax call to the appointments controller that will register     * the appointment to the database.     */    exports.registerAppointment = function () {        var $captchaText = $('.captcha-text');        if ($captchaText.length > 0) {            $captchaText.closest('.form-group').removeClass('has-error');            if ($captchaText.val() === '') {                $captchaText.closest('.form-group').addClass('has-error');                return;            }        }        var formData = jQuery.parseJSON($('input[name="post_data"]').val());        var postData = {            csrfToken: GlobalVariables.csrfToken,            post_data: formData        };        if ($captchaText.length > 0) {            postData.captcha = $captchaText.val();        }        if (GlobalVariables.manageMode) {            postData.exclude_appointment_id = GlobalVariables.appointmentData.id;        }        var postUrl = GlobalVariables.baseUrl + '/index.php/appointments/ajax_register_appointment';        var $layer = $('<div/>');        $.ajax({            url: postUrl,            method: 'post',            data: postData,            dataType: 'json',            beforeSend: function (jqxhr, settings) {                $layer                    .appendTo('body')                    .css({                        background: 'white',                        position: 'fixed',                        top: '0',                        left: '0',                        height: '100vh',                        width: '100vw',                        opacity: '0.5'                    });            }        })            .done(function (response) {                if (!GeneralFunctions.handleAjaxExceptions(response)) {                    $('.captcha-title small').trigger('click');                    return false;                }                if (response.captcha_verification === false) {                    $('#captcha-hint')                        .text(WBLang.captcha_is_wrong)                        .fadeTo(400, 1);                    setTimeout(function () {                        $('#captcha-hint').fadeTo(400, 0);                    }, 3000);                    $('.captcha-title small').trigger('click');                    $captchaText.closest('.form-group').addClass('has-error');                    return false;                }                var service = GlobalVariables.availableServices.find(                    service =>                        service.id == postData['post_data']['appointment']['id_services']                );                var user_data = {                    first_name: postData['post_data']['customer']['first_name'],                    last_name: postData['post_data']['customer']['last_name'],                    email: postData['post_data']['customer']['email'],                    phone_number: postData['post_data']['customer']['ma_mobile_number'],                    appointment_date: postData['post_data']['appointment']['start_datetime']                }                _payForBooking(                    user_data,                    parseFloat(service['price']),                    service['name'],                    response.appointment_id                );                // window.location.href = GlobalVariables.baseUrl                //                //     + '/index.php/appointments/book_success/' + response.appointment_id;            })            .fail(function (jqxhr, textStatus, errorThrown) {                $('.captcha-title small').trigger('click');                GeneralFunctions.ajaxFailureHandler(jqxhr, textStatus, errorThrown);            })            .always(function () {                $layer.remove();            });    };    function _payForBooking(user_data, service_price, service_name,appointment_id) {        var payfast_payload = {            merchant_id: GlobalVariables.merchantId,            merchant_key: GlobalVariables.merchantKey,            return_url:  GlobalVariables.baseUrl + '/index.php/appointments/book_success/' + appointment_id,            cancel_url: GlobalVariables.baseUrl + '/index.php/payments/payment_cancel',            notify_url: GlobalVariables.baseUrl + '/index.php/payments/payment_notify',            name_first: user_data.first_name,            name_last: user_data.last_name,            email_address: user_data.email,            m_payment_id: '',            amount: service_price,            item_name: service_name,            custom_str_1: user_data.phone_number,            custom_str_2: user_data.appointment_date,            signature: ''        }        var postData = {            csrfToken: GlobalVariables.csrfToken,            generate_payment_signature: payfast_payload,            payment: {                appointment_id: appointment_id,                payment_id: '',                amount: service_price,                signature: ''            }        };        var postUrl =            GlobalVariables.baseUrl +            '/index.php/payments/payment_initiate';        $.ajax({            url: postUrl,            method: 'post',            data: postData,            dataType: 'json'        })            .done(function(response) {                console.log(response);                payfast_payload['signature'] = response.signature;                payfast_payload['m_payment_id'] = response.payment_id;                var form = $(document.createElement('form'));                $(form).attr('action', 'https://sandbox.payfast.co.za/eng/process');                $(form).attr('method', 'POST');                $.each(payfast_payload, (key, value) => {                    var field = $('<input>')                        .attr('type', 'hidden')                        .attr('name', key)                        .val(value);                    $(form).append($(field));                });                $(form)                    .appendTo('body')                    .submit();            })            .fail(function(jqxhr, textStatus, errorThrown) {                $('.captcha-title small').trigger('click');                GeneralFunctions.ajaxFailureHandler(jqxhr, textStatus, errorThrown);            })    }    /**     * Get the unavailable dates of a provider.     *     * This method will fetch the unavailable dates of the selected provider and service and then it will     * select the first available date (if any). It uses the "FrontendBookApi.getAvailableHours" method to     * fetch the appointment* hours of the selected date.     *     * @param {Number} providerId The selected provider ID.     * @param {Number} serviceId The selected service ID.     * @param {String} selectedDateString Y-m-d value of the selected date.     */    exports.getUnavailableDates = function (providerId, serviceId, selectedDateString) {        if (processingUnavailabilities) {            return;        }        var appointmentId = FrontendBook.manageMode ? GlobalVariables.appointmentData.id : undefined;        var url = GlobalVariables.baseUrl + '/index.php/appointments/ajax_get_unavailable_dates';        var data = {            provider_id: providerId,            service_id: serviceId,            selected_date: encodeURIComponent(selectedDateString),            csrfToken: GlobalVariables.csrfToken,            manage_mode: FrontendBook.manageMode,            appointment_id: appointmentId        };        $.ajax({            url: url,            type: 'GET',            data: data,            dataType: 'json'        })            .done(function (response) {                unavailableDatesBackup = response;                selectedDateStringBackup = selectedDateString;                _applyUnavailableDates(response, selectedDateString, true);            })            .fail(GeneralFunctions.ajaxFailureHandler);    };    exports.applyPreviousUnavailableDates = function () {        _applyUnavailableDates(unavailableDatesBackup, selectedDateStringBackup);    };    function _applyUnavailableDates(unavailableDates, selectedDateString, setDate) {        setDate = setDate || false;        processingUnavailabilities = true;        // Select first enabled date.        var selectedDate = Date.parse(selectedDateString);        var numberOfDays = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate();        if (setDate && !GlobalVariables.manageMode) {            for (var i = 1; i <= numberOfDays; i++) {                var currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), i);                if (unavailableDates.indexOf(currentDate.toString('yyyy-MM-dd')) === -1) {                    $('#select-date').datepicker('setDate', currentDate);                    FrontendBookApi.getAvailableHours(currentDate.toString('yyyy-MM-dd'));                    break;                }            }        }        // If all the days are unavailable then hide the appointments hours.        if (unavailableDates.length === numberOfDays) {            $('#available-hours').text(WBLang.no_available_hours);        }        // Grey out unavailable dates.        $('#select-date .ui-datepicker-calendar td:not(.ui-datepicker-other-month)').each(function (index, td) {            selectedDate.set({day: index + 1});            if ($.inArray(selectedDate.toString('yyyy-MM-dd'), unavailableDates) != -1) {                $(td).addClass('ui-datepicker-unselectable ui-state-disabled');            }        });        processingUnavailabilities = false;    }    /**     * Save the user's consent.     *     * @param {Object} consent Contains user's consents.     */    exports.saveConsent = function (consent) {        var url = GlobalVariables.baseUrl + '/index.php/consents/ajax_save_consent';        var data = {            csrfToken: GlobalVariables.csrfToken,            consent: consent        };        $.post(url, data, function (response) {            if (!GeneralFunctions.handleAjaxExceptions(response)) {                return;            }        }, 'json').fail(GeneralFunctions.ajaxFailureHandler);    };    /**     * Delete personal information.     *     * @param {Number} customerToken Customer unique token.     */    exports.deletePersonalInformation = function (customerToken) {        var url = GlobalVariables.baseUrl + '/index.php/privacy/ajax_delete_personal_information';        var data = {            csrfToken: GlobalVariables.csrfToken,            customer_token: customerToken        };        $.post(url, data, function (response) {            if (!GeneralFunctions.handleAjaxExceptions(response)) {                return;            }            location.href = GlobalVariables.baseUrl;        }, 'json').fail(GeneralFunctions.ajaxFailureHandler);    };})(window.FrontendBookApi);